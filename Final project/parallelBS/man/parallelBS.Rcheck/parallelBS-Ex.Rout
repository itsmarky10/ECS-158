
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "parallelBS"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('parallelBS')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("basis")
> ### * basis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: basis
> ### Title: Basis
> ### Aliases: basis
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (x, degree, i, knots) 
+ {
+     if (degree == 0) 
+         B = ifelse((x >= knots[i]) & (x < knots[i + 1]), 1, 0)
+     else {
+         if ((knots[degree + i] - knots[i]) == 0) 
+             alpha1 = 0
+         else alpha1 = (x - knots[i])/(knots[degree + i] - knots[i])
+         if ((knots[i + degree + 1] - knots[i + 1]) == 0) 
+             alpha2 = 0
+         else alpha2 = (knots[i + degree + 1] - x)/(knots[i + 
+             degree + 1] - knots[i + 1])
+         B = alpha1 * basis(x, (degree - 1), i, knots) + alpha2 * 
+             basis(x, (degree - 1), (i + 1), knots)
+     }
+     return(B)
+   }
function (x, degree, i, knots) 
{
    if (degree == 0) 
        B = ifelse((x >= knots[i]) & (x < knots[i + 1]), 1, 0)
    else {
        if ((knots[degree + i] - knots[i]) == 0) 
            alpha1 = 0
        else alpha1 = (x - knots[i])/(knots[degree + i] - knots[i])
        if ((knots[i + degree + 1] - knots[i + 1]) == 0) 
            alpha2 = 0
        else alpha2 = (knots[i + degree + 1] - x)/(knots[i + 
            degree + 1] - knots[i + 1])
        B = alpha1 * basis(x, (degree - 1), i, knots) + alpha2 * 
            basis(x, (degree - 1), (i + 1), knots)
    }
    return(B)
}
> 
> 
> 
> cleanEx()
> nameEx("bs")
> ### * bs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bs
> ### Title: bs
> ### Aliases: bs
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (x, degree = 3, interior.knots = NULL, intercept = FALSE, 
+     Boundary.knots = c(0, 1), type = "serial", ncls = 2) 
+ {
+     if (missing(x)) 
+         stop("You must provide x")
+     if (degree < 1) 
+         stop("The spline degree must be at least 1")
+     Boundary.knots = sort(Boundary.knots)
+     interior.knots.sorted = NULL
+     if (!is.null(interior.knots)) 
+         interior.knots.sorted = sort(interior.knots)
+     knots <- c(rep(Boundary.knots[1], (degree + 1)), interior.knots.sorted, 
+         rep(Boundary.knots[2], (degree + 1)))
+     K <- length(interior.knots) + degree + 1
+     lenx = length(x)
+     if (type == "openmp") {
+         print("run type: openmp")
+         dyn.load("bs_omp.so")
+         Bmat = .Call("formMatrix", x, degree, knots, K, lenx)
+     }
+     else if (type == "cuda") {
+         print("run type: cuda")
+         dyn.load("bs_cuda.so")
+         Bmat = .Call("formMatrix", x, degree, knots, K, lenx)
+     }
+     else if (type == "snow") {
+         print("run type: snow")
+         cls = makePSOCKcluster(rep("localhost", ncls))
+         print(cls)
+         Bmat = formMatrixSnow(cls, x, degree, knots, K)
+     }
+     else if (type == "serial") {
+         print("run type: serial")
+         Bmat = matrix(0, length(x), K)
+         for (j in 1:K) Bmat[, j] = basis(x, degree, j, knots)
+     }
+     else {
+         print("Incorrect run type - serial used instead")
+         Bmat = matrix(0, length(x), K)
+         for (j in 1:K) Bmat[, j] = basis(x, degree, j, knots)
+     }
+     if (any(x == Boundary.knots[2])) 
+         Bmat[x == Boundary.knots[2], K] <- 1
+     if (intercept == FALSE) 
+         return(Bmat[, -1])
+     else return(Bmat)
+   }
function (x, degree = 3, interior.knots = NULL, intercept = FALSE, 
    Boundary.knots = c(0, 1), type = "serial", ncls = 2) 
{
    if (missing(x)) 
        stop("You must provide x")
    if (degree < 1) 
        stop("The spline degree must be at least 1")
    Boundary.knots = sort(Boundary.knots)
    interior.knots.sorted = NULL
    if (!is.null(interior.knots)) 
        interior.knots.sorted = sort(interior.knots)
    knots <- c(rep(Boundary.knots[1], (degree + 1)), interior.knots.sorted, 
        rep(Boundary.knots[2], (degree + 1)))
    K <- length(interior.knots) + degree + 1
    lenx = length(x)
    if (type == "openmp") {
        print("run type: openmp")
        dyn.load("bs_omp.so")
        Bmat = .Call("formMatrix", x, degree, knots, K, lenx)
    }
    else if (type == "cuda") {
        print("run type: cuda")
        dyn.load("bs_cuda.so")
        Bmat = .Call("formMatrix", x, degree, knots, K, lenx)
    }
    else if (type == "snow") {
        print("run type: snow")
        cls = makePSOCKcluster(rep("localhost", ncls))
        print(cls)
        Bmat = formMatrixSnow(cls, x, degree, knots, K)
    }
    else if (type == "serial") {
        print("run type: serial")
        Bmat = matrix(0, length(x), K)
        for (j in 1:K) Bmat[, j] = basis(x, degree, j, knots)
    }
    else {
        print("Incorrect run type - serial used instead")
        Bmat = matrix(0, length(x), K)
        for (j in 1:K) Bmat[, j] = basis(x, degree, j, knots)
    }
    if (any(x == Boundary.knots[2])) 
        Bmat[x == Boundary.knots[2], K] <- 1
    if (intercept == FALSE) 
        return(Bmat[, -1])
    else return(Bmat)
}
> 
> 
> 
> cleanEx()
> nameEx("formMatrixSnow")
> ### * formMatrixSnow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: formMatrixSnow
> ### Title: Form Matrix Snow
> ### Aliases: formMatrixSnow
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (cls, x, degree, knots, K) 
+ {
+     sequence = 1:K
+     basis = function(i, degree) {
+         if (degree == 0) {
+             B = ifelse((x >= knots[i]) & (x < knots[i + 1]), 
+                 1, 0)
+         }
+         else {
+             if ((knots[degree + i] - knots[i]) == 0) 
+                 alpha1 = 0
+             else alpha1 = (x - knots[i])/(knots[degree + i] - 
+                 knots[i])
+             if ((knots[i + degree + 1] - knots[i + 1]) == 0) 
+                 alpha2 = 0
+             else alpha2 = (knots[i + degree + 1] - x)/(knots[i + 
+                 degree + 1] - knots[i + 1])
+             B = alpha1 * basis(i, (degree - 1)) + alpha2 * basis((i + 
+                 1), (degree - 1))
+         }
+         return(B)
+     }
+     jvector = clusterApply(cls, sequence, basis, degree)
+     Bmat = Reduce(cbind, jvector)
+   }
function (cls, x, degree, knots, K) 
{
    sequence = 1:K
    basis = function(i, degree) {
        if (degree == 0) {
            B = ifelse((x >= knots[i]) & (x < knots[i + 1]), 
                1, 0)
        }
        else {
            if ((knots[degree + i] - knots[i]) == 0) 
                alpha1 = 0
            else alpha1 = (x - knots[i])/(knots[degree + i] - 
                knots[i])
            if ((knots[i + degree + 1] - knots[i + 1]) == 0) 
                alpha2 = 0
            else alpha2 = (knots[i + degree + 1] - x)/(knots[i + 
                degree + 1] - knots[i + 1])
            B = alpha1 * basis(i, (degree - 1)) + alpha2 * basis((i + 
                1), (degree - 1))
        }
        return(B)
    }
    jvector = clusterApply(cls, sequence, basis, degree)
    Bmat = Reduce(cbind, jvector)
}
> 
> 
> 
> cleanEx()
> nameEx("parallelBS-package")
> ### * parallelBS-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parallelBS-package
> ### Title: What the package does (short line) ~~ package title ~~
> ### Aliases: parallelBS-package parallelBS
> ### Keywords: package
> 
> ### ** Examples
> 
> ~~ simple examples of the most important functions ~~
Error: unexpected symbol in "~~ simple examples"
Execution halted
